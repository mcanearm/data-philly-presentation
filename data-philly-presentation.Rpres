Web-Scraping and Data Munging in R: Hadley Style
========================================================
author: Matthew McAnear
date: Feb. 19, 2015

Intro
===

- Matthew McAnear
- Data Scientist with Seer Interactive
- Bucknell '13 / UPenn '14
- Volunteer Work
- I live in South Philly.

***

![me](baby.png)

Surprise
===
I'm moving to Reno tomorrow.
![reno](philly_reno.png)

Packages in this talk
===


- `rvest`
- `plyr`
- `dplyr`
- `magrittr`

![hadley](hadley-rice.png)


Web-Scraping
===
First, you need to create a list of URLs to scrape.

```{r}
base_url <- 'http://reno.craigslist.org/search/apa?s='
page_index <- seq(0, 500, by=100)
urls <- paste0(base_url, page_index)
```

This Gives You:
===
```{r}
urls
```

Using Rvest
===
Check out the repository at [https://github.com/mcanear/craig-scrape](https://github.com/mcanearm/scraig-scrape) for source code.
```{r, eval=FALSE}
library(CraigScrape)

fields <- c('time', '.hdrlnk', '.housing', 'small', '.price')
reno.apartments <- lapply(urls, function(url) {
  reno.data <- ScrapeCraigslist(url, '.row', fields)
})

reno <- do.call('rbind', reno.apartments)
```

Wait - how did you scrape that?
===

```{r, eval=FALSE}

ScrapeCraigslist <- function(url, row.selector, fields) {
  raw.html <- rvest::html(url)
  
  # Return data by css selector on the page
  overall.data <- pblapply(fields, function(field){
    field.data <- raw.html %>%
      html_nodes(row.selector) %>%
      html_node(field) %>%
      html_text()
  })
  
  overall.data <- do.call('cbind.data.frame', overall.data)
  names(overall.data) <- fields
  
  return(overall.data)
}

```

What does this data look like?
===
```{r, echo=FALSE, eval=TRUE}
library(CraigScrape)
data(reno)
str(reno)
```

How do we clean all this data?
============================================================================
- **plyr**
- **dplyr**
- **magrittr**

What are plyr and dplyr?
========================================================

- R Packages for data cleaning
- Hadley Wickham (`ggplot2`, `rvest`, `stringr`...)
- Focus is on easy syntax and readability

plyr Naming Conventions
===
- `a`: array
- **`l`: list**
- **`d`: dataframe**
- `m`: multiple inputs
- `r`: repeat multiple times
- `_`: nothing
- First letter: input
- Second letter: output


plyr Example (ddply)
===
**dd**ply - dataframe in, dataframe out!
```{r}
# Get a dataframe with just the values you want
library(plyr)
reno.df <- ddply(reno, .(), mutate, 
                 price = as.integer(gsub('\\$', '', as.character(.price))),
                 small = gsub('\\(|\\)', '', as.character(small)),
                 housing = as.character(.housing),
                 time = as.character(time),
                 description = as.character(.hdrlnk))
```

ddply Output
========================================================
*Some Columns ommitted from the output.
```{r, echo=FALSE}
head(reno.df[, c(2, 5, 7)])
```

Another plyr Example (dlply)
===

**dl**ply - dataframe in, list out!
```{r}
mean.rents <- dlply(reno.df, ~time, summarize,
                    mean.rent = round(mean(price, na.rm=TRUE), 0))
mean.rents[1:2]
```

What is plyr best for?
===
- Lots of simple data cleaning.
- Complex data cleaning tasks are best handled outside plyr (in my opinion).

*Ex.*

```{r}
reno.df$housing[1:5]
```

```{r, echo=FALSE}
reno.df$beds <- unlist(lapply(strsplit(reno.df$housing, split = '-'), function(string) {
  beds <- grepl('br', string)
  if (TRUE %in% beds) {
    beds <- gsub('/| |br', '', string[grep('br', string)][1])
    beds <- as.integer(beds)
  } else {
    beds <- NA
  }
}))

reno.df$footage2 <- unlist(lapply(strsplit(reno.df$housing, split = '-'), function(string) {
  footage <- grepl('ft2', string)
  if (TRUE %in% footage) {
    footage <- gsub('/| |ft2', '', string[grep('ft2', string)][1])
    footage <- as.integer(footage)
  } else {
    footage <- NA
  }
}))
```

dplyr
===
- Data selection and querying workhorse
- simple syntax
- `magrittr` and `%>%`
- Emphasis on readability and ease of use
- Some C++ optimizations


dplyr Examples
===
- Grab all the apartments under $1000.
```{r}
sub_1k <- filter(reno.df, price < 1000)
head(sub_1k[, c('small', 'price')])
```

Chaining Operations
===
- Using the `%>%`, one can pass objects from function to function
- Allows for very readable code
- Ex: get all apartments between $800 and $1200 in Reno, arranged in decreasing
order by square footage per bedroom.

```{r}
mid_range <- reno.df %>% filter(price >= 800 & price <= 1200, grepl('Reno', small)==TRUE) %>%
  mutate(br_sqft = round(footage2/beds, 2)) %>% 
  arrange(desc(br_sqft)) %>% 
  select(br_sqft, price)
```

Output
===
```{r}
mid_range[1:5, ]
```
It works just like any other data frame.
===
```{r, fig=TRUE, out.width='700px', out.height='700px', echo=FALSE, fig.align='center', results='hide'}
fit <- lm(price ~ br_sqft, data=mid_range)
plot(mid_range$br_sqft, mid_range$price) + abline(fit, col='red')
```

Thanks!
===
- E-mail: <mcanearm@gmail.com>
- Github: <https://github.com/mcanearm>
- Special Thanks to Hadley Wickham
- Questions?